name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.9"
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.12"
          - os: ubuntu-latest
            python-version: "3.13"
          - os: macos-latest
            python-version: "3.13"

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl pkg-config
        echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

    - name: Install maturin
      run: |
        python -m pip install --upgrade pip
        python -m pip install maturin[patchelf]

    - name: Build wheel
      run: maturin build --release --out dist --features python

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Build sdist
      uses: PyO3/maturin-action@v1
      with:
        command: sdist
        args: --out dist --features python

    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist

  build-binaries:
    name: Build binaries on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl pkg-config
        echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

    - name: Build binary
      run: cargo build --release

    - name: Rename binary for release
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          cp target/release/annorefine annorefine-linux-x86_64
        else
          cp target/release/annorefine annorefine-macos-arm64
        fi

    - name: Upload binary to release
      uses: softprops/action-gh-release@v1
      with:
        files: ./annorefine-${{ matrix.os == 'ubuntu-latest' && 'linux-x86_64' || 'macos-arm64' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload binary artifact (backup)
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.os }}
        path: annorefine-${{ matrix.os == 'ubuntu-latest' && 'linux-x86_64' || 'macos-arm64' }}

  release-github:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist, build-binaries]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-pypi:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist]
    if: startsWith(github.ref, 'refs/tags/')
    environment:
      name: pypi
      url: https://pypi.org/p/annorefine
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true

  build-rust-binaries:
    name: Build Rust binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: annorefine-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: annorefine-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: annorefine-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl pkg-config

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/annorefine ${{ matrix.name }}
        chmod +x ${{ matrix.name }}

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}
